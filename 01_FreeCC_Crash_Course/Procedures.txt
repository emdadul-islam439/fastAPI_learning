## Installation:
    * install fastAPI with -> "pip install fastAPI"
    * install Uvicorn (for server management) -> "pip install uvicorn"

## Creating First API:
    * import FastAPI 
    * create 'app' variable. in this case-> "app = FastAPI()"
    * create first end-point. in this case
        -> "@app.get('/')"
        -> def index():
    * return a json:
        ->return {'name' : 'first data'}

## Start the Uvicorn:
    * go to the project's directory by 'cd' command [other-wise the server will not start correctly]
        -> "cd 01_FreeCC_Crash_Course"
    * write "uvicorn <file-name>:<fastAPI-object-name> --reload" and the server will open-up
        -> in this case written "uvicorn myapi:app --reload"
    * after starting the server, it can be seen from the browser:
        -> go to "http://127.0.0.1:8000" [generally given into the command-prompt instruction]
    * For quitting from the server, press CTRL + C in the command-prompt
        -> if pressed the server and the Browser's data will be shut-downed
        -> can't access anything from browser
    * From the "http://127.0.0.1:8000/docs", yes '/docs' is added:
        -> can be tested the API like POSTMAN

## Writing PATH API:
    * in the '@app.get()', use path-parameter
        -> "@app.get("/get-student/{student_id}")
        -> where 'student_id' is the dynamic parameter
    * declare a function, and add the 'dynamic parameter' with data-type
        -> def get_student(student_id: int):
    * return a dictonary:
        -> if student_id in students: 
            return students[student_id]
    * add Path(..., ...) into the 'get_student(... , path(...)) to describe the intention:
        -> add 'Path' into the import's line -> from fastapi import FastAPI, Path
        -> def get_student(student_id: int = Path(None, description = "The ID of the student you want to view")):

## Writing Query API:
    * just don't take any dynamic parameter in the '@app.get(....)' function
        -> @app.get("/get-by-name") [don't add any '{}' related parameter, that's it!]
    * the rest is the same as 'path api'
        -> def get_student(name: str):......

## Combined path-query API:
    * if there is a dynamic parameter (path variable) at the ANNOTATION part, then just add this as a function parameter
        -> @app.get("/get-by-id-and-name/{student_id}") [this ANNOTATION part has a dynamic variable-> 'student_id']
        -> def get_student(student_id: int, name: str) [added the get_student parameter into the 'get_student' function] 

## Writing API with OPTIONAL parameter:
    * just initialize variable inside the function call
        -> def get_student(student_id: int, name: str = None) [initialized the 'name' variable into the 'get_student' function]

## Creating POST API:
    * use "@app.post()" instead of "@app.get()" function,
        -> @app.post("/create-student/{student_id}")
    * rest portion is same as get method (at least in basic level)
        -> def create_student(student_id: int, student: Student): ....
    *** For making/storing 'Data Class', import BaseModel from pydantic
        -> class Student(BaseModel):
                Name : str
                age : int
                year : str

